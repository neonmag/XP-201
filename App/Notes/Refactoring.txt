Основні прийоми рефакторингу

Проблема: "роздутий" код (метод, клас, файл тощо)
Ознака(критерій): окремий блок коду можна поєднати своїм коментарем

class{
	method{
		instruction							|
		instruction			| algo			|
		instruction			| for			|	region
		instruction			| smthn			|	for
		instruction			|				|	smthn
		instruction							|
	}										|
	method{									|
		instruction							|
		instruction							|
		instruction							|
	}										|
	method{
		instruction
		instruction
		instruction
	}
}

Альтернативні критерії: 
-	блок коду (метод, клас, файл) 
	не влазить на один "екран" (25-40 рядків)
-   7 +- 2 

Критика: занадто розгалужений код, для розуміння цілісної картини
необхідно переглянути велику кількість файлів
---------------------------------------------------------

Проблема: Змішування алгоритмів (порушенння Single Responsibility)
Ознака? в одному блоці вирішуються декілька задач (перевірка + дія)
for(item in items)
{
	if(item.name == null) ...
	else (widget.add(item))
}
Наслідки: ускладнення змін однієї з задач, "зачіпання іншої задачі"
Рішення: розділення задач
Критика: збільшення працеємності, оскільки повторюються цикли та подібні
конструкції

items = items.filter(item => item.name != null)
widget.addAll(items)